# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Auto Port

on:
  pull_request_target:
    types: [closed]
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  backport:
    name: Backport to maven-4.0.x
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request_target' &&
       github.event.pull_request.merged &&
       github.event.pull_request.base.ref == 'master' &&
       contains(github.event.pull_request.labels.*.name, 'backport-to-4.0.x')) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/backport'))

    steps:
      - name: Check comment permissions
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });

            if (!['admin', 'write'].includes(collaborator.permission)) {
              core.setFailed(`@${context.actor} does not have permission to trigger backport commands`);
              return;
            }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, prTitle, prAuthor, prDescription;

            if (context.eventName === 'pull_request_target') {
              prNumber = context.payload.pull_request.number;
              prTitle = context.payload.pull_request.title;
              prAuthor = context.payload.pull_request.user.login;
              prDescription = context.payload.pull_request.body || '';
            } else if (context.eventName === 'issue_comment') {
              prNumber = context.payload.issue.number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              prTitle = pr.title;
              prAuthor = pr.user.login;
              prDescription = pr.body || '';
            }

            core.setOutput('pr-number', prNumber);
            core.setOutput('pr-title', prTitle);
            core.setOutput('pr-author', prAuthor);
            core.setOutput('pr-description', prDescription);

      - name: Create backport branch and cherry-pick
        id: backport
        run: |
          set -e

          PR_NUMBER="${{ steps.pr-info.outputs.pr-number }}"
          BRANCH_NAME="backport-${PR_NUMBER}-to-maven-4.0.x"

          # Create and switch to backport branch
          git checkout -b "$BRANCH_NAME" origin/maven-4.0.x

          # Get the merge commit SHA
          MERGE_COMMIT=$(git log --oneline --grep="Merge pull request #${PR_NUMBER}" --format="%H" -n 1 origin/master)

          if [ -z "$MERGE_COMMIT" ]; then
            echo "Could not find merge commit for PR #${PR_NUMBER}"
            exit 1
          fi

          echo "Found merge commit: $MERGE_COMMIT"

          # Get the commits from the PR (excluding the merge commit)
          COMMITS=$(git rev-list --reverse "${MERGE_COMMIT}^1..${MERGE_COMMIT}^2")

          echo "Commits to cherry-pick:"
          echo "$COMMITS"

          # Cherry-pick each commit
          CONFLICT=false
          for commit in $COMMITS; do
            echo "Cherry-picking $commit"
            if ! git cherry-pick -x "$commit"; then
              echo "Conflict detected during cherry-pick of $commit"
              CONFLICT=true
              # Add the conflicted files and commit
              git add .
              git -c core.editor=true cherry-pick --continue || true
              break
            fi
          done

          # Push the branch
          git push origin "$BRANCH_NAME"

          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "has-conflicts=$CONFLICT" >> $GITHUB_OUTPUT

      - name: Create backport pull request
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr-info.outputs.pr-number }}';
            const prTitle = '${{ steps.pr-info.outputs.pr-title }}';
            const prAuthor = '${{ steps.pr-info.outputs.pr-author }}';
            const prDescription = `${{ steps.pr-info.outputs.pr-description }}`;
            const branchName = '${{ steps.backport.outputs.branch-name }}';
            const hasConflicts = '${{ steps.backport.outputs.has-conflicts }}' === 'true';

            const title = `[Backport maven-4.0.x] ${prTitle}`;
            const body = `# Backport to maven-4.0.x

            This is an automated backport of #${prNumber} to the \`maven-4.0.x\` branch.

            **Original PR:** #${prNumber} by @${prAuthor}

            ${hasConflicts ? '⚠️ **This PR has conflicts that need to be resolved manually.**' : ''}

            ---

            ${prDescription}`;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: branchName,
              base: 'maven-4.0.x',
              body: body,
              draft: hasConflicts
            });

            // Add auto-port label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['auto-port']
            });

            console.log(`Created backport PR #${pr.number}: ${pr.html_url}`);

  forward-port:
    name: Forward-port to master
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request_target' &&
       github.event.pull_request.merged &&
       github.event.pull_request.base.ref == 'maven-4.0.x' &&
       contains(github.event.pull_request.labels.*.name, 'forward-port-to-master')) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/forward-port'))

    steps:
      - name: Check comment permissions
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });

            if (!['admin', 'write'].includes(collaborator.permission)) {
              core.setFailed(`@${context.actor} does not have permission to trigger forward-port commands`);
              return;
            }

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, prTitle, prAuthor, prDescription;

            if (context.eventName === 'pull_request_target') {
              prNumber = context.payload.pull_request.number;
              prTitle = context.payload.pull_request.title;
              prAuthor = context.payload.pull_request.user.login;
              prDescription = context.payload.pull_request.body || '';
            } else if (context.eventName === 'issue_comment') {
              prNumber = context.payload.issue.number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              prTitle = pr.title;
              prAuthor = pr.user.login;
              prDescription = pr.body || '';
            }

            core.setOutput('pr-number', prNumber);
            core.setOutput('pr-title', prTitle);
            core.setOutput('pr-author', prAuthor);
            core.setOutput('pr-description', prDescription);

      - name: Create forward-port branch and cherry-pick
        id: forward-port
        run: |
          set -e

          PR_NUMBER="${{ steps.pr-info.outputs.pr-number }}"
          BRANCH_NAME="backport-${PR_NUMBER}-to-master"

          # Create and switch to forward-port branch
          git checkout -b "$BRANCH_NAME" origin/master

          # Get the merge commit SHA
          MERGE_COMMIT=$(git log --oneline --grep="Merge pull request #${PR_NUMBER}" --format="%H" -n 1 origin/maven-4.0.x)

          if [ -z "$MERGE_COMMIT" ]; then
            echo "Could not find merge commit for PR #${PR_NUMBER}"
            exit 1
          fi

          echo "Found merge commit: $MERGE_COMMIT"

          # Get the commits from the PR (excluding the merge commit)
          COMMITS=$(git rev-list --reverse "${MERGE_COMMIT}^1..${MERGE_COMMIT}^2")

          echo "Commits to cherry-pick:"
          echo "$COMMITS"

          # Cherry-pick each commit
          CONFLICT=false
          for commit in $COMMITS; do
            echo "Cherry-picking $commit"
            if ! git cherry-pick -x "$commit"; then
              echo "Conflict detected during cherry-pick of $commit"
              CONFLICT=true
              # Add the conflicted files and commit
              git add .
              git -c core.editor=true cherry-pick --continue || true
              break
            fi
          done

          # Push the branch
          git push origin "$BRANCH_NAME"

          echo "branch-name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "has-conflicts=$CONFLICT" >> $GITHUB_OUTPUT

      - name: Create forward-port pull request
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr-info.outputs.pr-number }}';
            const prTitle = '${{ steps.pr-info.outputs.pr-title }}';
            const prAuthor = '${{ steps.pr-info.outputs.pr-author }}';
            const prDescription = `${{ steps.pr-info.outputs.pr-description }}`;
            const branchName = '${{ steps.forward-port.outputs.branch-name }}';
            const hasConflicts = '${{ steps.forward-port.outputs.has-conflicts }}' === 'true';

            const title = `[Forward-port master] ${prTitle}`;
            const body = `# Forward-port to master

            This is an automated forward-port of #${prNumber} to the \`master\` branch.

            **Original PR:** #${prNumber} by @${prAuthor}

            ${hasConflicts ? '⚠️ **This PR has conflicts that need to be resolved manually.**' : ''}

            ---

            ${prDescription}`;

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: branchName,
              base: 'master',
              body: body,
              draft: hasConflicts
            });

            // Add auto-port label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['auto-port']
            });

            console.log(`Created forward-port PR #${pr.number}: ${pr.html_url}`);
